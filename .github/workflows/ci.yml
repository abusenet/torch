name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # make sure all code has been formatted with rustfmt
      - run: rustup component add rustfmt
      - name: check rustfmt
        run: cargo fmt -- --check --color always

      # run clippy to verify we have no warnings
      - run: rustup component add clippy
      - run: cargo fetch
      - name: cargo clippy
        run: cargo clippy --all-targets -- -D warnings

  test:
    name: Test
    needs: [lint]
    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-latest, windows-latest]
        build: [stable, beta, nightly]
        include:
          - build: beta
            rust: beta
          - build: nightly
            rust: nightly
            benches: true
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          profile: minimal
          override: true

      - name: Build debug
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }}

      - name: Test all benches
        if: matrix.benches
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --benches ${{ matrix.features }}

  build:
    name: Build for ${{ matrix.job.os }}
    needs: [test]
    runs-on: ${{ matrix.job.os }}
    strategy:
      matrix:
        job:
          - { os: macos-latest,   target: x86_64-apple-darwin,         use-cross: false }
          - { os: windows-latest, target: x86_64-pc-windows-msvc,      use-cross: false }
          - { os: ubuntu-latest , target: x86_64-unknown-linux-gnu,    use-cross: false }
          - { os: ubuntu-latest,  target: x86_64-unknown-linux-musl,   use-cross: true }
          - { os: ubuntu-latest,  target: i686-unknown-linux-gnu,      use-cross: true }
          - { os: ubuntu-latest,  target: arm-unknown-linux-gnueabihf, use-cross: true }
          - { os: ubuntu-latest,  target: aarch64-unknown-linux-gnu,   use-cross: true }
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: Cargo build
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.7
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.job.use-cross }}
          args: --release --target ${{ matrix.job.target }}

      - name: Package
        shell: bash
        run: |
          #strip target/${{ matrix.job.target }}/release/torch
          cd target/${{ matrix.job.target }}/release
          tar czvf ../../../torch-${{ matrix.job.target }}.tar.gz torch
          cd -
      - name: Publish
        uses: softprops/action-gh-release@v1
        # TODO: if any of the build step fails, the release should be deleted.
        with:
            files: 'torch*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
