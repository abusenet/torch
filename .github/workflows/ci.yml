name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  lint:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lints-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lints-

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
          override: true

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: clippy
          args: -- -D warnings

  test:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: Test
    needs: [lint]
    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-latest, windows-latest]
        build: [stable, beta, nightly]
        include:
          - build: beta
            rust: beta
          - build: nightly
            rust: nightly
            benches: true
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-check-

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          profile: minimal
          override: true

      - name: Build debug
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }}

      - name: Test all benches
        if: matrix.benches
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --benches ${{ matrix.features }}

  build:
    name: Build for ${{ matrix.job.os }}
    needs: [test]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-latest,   target: x86_64-apple-darwin,         cross: false }
          - { os: windows-latest, target: x86_64-pc-windows-msvc,      cross: false, suffix: ".exe" }
          - { os: ubuntu-latest , target: x86_64-unknown-linux-gnu,    cross: false }
          - { os: ubuntu-latest,  target: x86_64-unknown-linux-musl,   cross: true }
          - { os: ubuntu-latest,  target: i686-unknown-linux-gnu,      cross: true }
          - { os: ubuntu-latest,  target: arm-unknown-linux-gnueabihf, cross: true }
          - { os: ubuntu-latest,  target: aarch64-unknown-linux-gnu,   cross: true }
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.job.target }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-build-

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.job.target }}

      - name: Cargo build
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.7
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.job.cross }}
          args: --release --target ${{ matrix.job.target }}

      - name: Optionally strip and upx
        if: ${{ !matrix.job.cross }}
        uses: svenstaro/upx-action@2.0.1
        with:
          file: target/${{ matrix.job.target }}/release/torch${{ matrix.job.suffix }}
          args: --best
          strip: true

      - uses: actions/upload-artifact@master
        with:
          name: torch-${{ matrix.job.target }}${{ matrix.job.suffix }}
          path: target/${{ matrix.job.target }}/release/torch${{ matrix.job.suffix }}

      - name: Get VERSION
        if: startsWith(github.ref, 'refs/tags/v')
        id: get_version
        shell: bash
        run: |
          echo "::set-output name=VERSION::${GITHUB_REF#refs/tags/}"

      - name: Renaming file before uploading
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        shell: bash
        run: |
          cp target/${{ matrix.job.target }}/release/torch${{ matrix.job.suffix }} torch-$VERSION-${{ matrix.job.target }}${{ matrix.job.suffix }}

      - name: Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        # TODO: if any of the build step fails, the release should be deleted.
        with:
            draft: true
            rerelease: false
            files: torch-${{ steps.get_version.outputs.VERSION }}-${{ matrix.job.target }}${{ matrix.job.suffix }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
